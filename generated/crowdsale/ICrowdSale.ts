// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokensPurchased extends ethereum.Event {
  get params(): TokensPurchased__Params {
    return new TokensPurchased__Params(this);
  }
}

export class TokensPurchased__Params {
  _event: TokensPurchased;

  constructor(event: TokensPurchased) {
    this._event = event;
  }

  get purchaser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ICrowdSale extends ethereum.SmartContract {
  static bind(address: Address): ICrowdSale {
    return new ICrowdSale("ICrowdSale", address);
  }

  fundsRaised(): BigInt {
    let result = super.call("fundsRaised", "fundsRaised():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundsRaised(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundsRaised", "fundsRaised():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensAvailable(): BigInt {
    let result = super.call(
      "tokensAvailable",
      "tokensAvailable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensAvailable",
      "tokensAvailable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wallet(): Address {
    let result = super.call("wallet", "wallet():(address)", []);

    return result[0].toAddress();
  }

  try_wallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("wallet", "wallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BuyTokensCall extends ethereum.Call {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }
}

export class ExternalBuyTokensCall extends ethereum.Call {
  get inputs(): ExternalBuyTokensCall__Inputs {
    return new ExternalBuyTokensCall__Inputs(this);
  }

  get outputs(): ExternalBuyTokensCall__Outputs {
    return new ExternalBuyTokensCall__Outputs(this);
  }
}

export class ExternalBuyTokensCall__Inputs {
  _call: ExternalBuyTokensCall;

  constructor(call: ExternalBuyTokensCall) {
    this._call = call;
  }

  get beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExternalBuyTokensCall__Outputs {
  _call: ExternalBuyTokensCall;

  constructor(call: ExternalBuyTokensCall) {
    this._call = call;
  }
}
