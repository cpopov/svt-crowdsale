// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class VestingLockedIn extends ethereum.Event {
  get params(): VestingLockedIn__Params {
    return new VestingLockedIn__Params(this);
  }
}

export class VestingLockedIn__Params {
  _event: VestingLockedIn;

  constructor(event: VestingLockedIn) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get releaseTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VestingReleased extends ethereum.Event {
  get params(): VestingReleased__Params {
    return new VestingReleased__Params(this);
  }
}

export class VestingReleased__Params {
  _event: VestingReleased;

  constructor(event: VestingReleased) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get releaseTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IVestingVault__vestingForResultValue0Struct extends ethereum.Tuple {
  get beneficiary(): Address {
    return this[0].toAddress();
  }

  get releaseTime(): BigInt {
    return this[1].toBigInt();
  }

  get tokenAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class IVestingVault extends ethereum.SmartContract {
  static bind(address: Address): IVestingVault {
    return new IVestingVault("IVestingVault", address);
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vestingFor(
    beneficary_: Address
  ): Array<IVestingVault__vestingForResultValue0Struct> {
    let result = super.call(
      "vestingFor",
      "vestingFor(address):((address,uint256,uint256)[])",
      [ethereum.Value.fromAddress(beneficary_)]
    );

    return result[0].toTupleArray<
      IVestingVault__vestingForResultValue0Struct
    >();
  }

  try_vestingFor(
    beneficary_: Address
  ): ethereum.CallResult<Array<IVestingVault__vestingForResultValue0Struct>> {
    let result = super.tryCall(
      "vestingFor",
      "vestingFor(address):((address,uint256,uint256)[])",
      [ethereum.Value.fromAddress(beneficary_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<IVestingVault__vestingForResultValue0Struct>()
    );
  }
}

export class AddBeneficiaryCall extends ethereum.Call {
  get inputs(): AddBeneficiaryCall__Inputs {
    return new AddBeneficiaryCall__Inputs(this);
  }

  get outputs(): AddBeneficiaryCall__Outputs {
    return new AddBeneficiaryCall__Outputs(this);
  }
}

export class AddBeneficiaryCall__Inputs {
  _call: AddBeneficiaryCall;

  constructor(call: AddBeneficiaryCall) {
    this._call = call;
  }

  get beneficiary_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get releaseTime_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddBeneficiaryCall__Outputs {
  _call: AddBeneficiaryCall;

  constructor(call: AddBeneficiaryCall) {
    this._call = call;
  }
}

export class ReleaseCall extends ethereum.Call {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }
}
