// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC20Released extends ethereum.Event {
  get params(): ERC20Released__Params {
    return new ERC20Released__Params(this);
  }
}

export class ERC20Released__Params {
  _event: ERC20Released;

  constructor(event: ERC20Released) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EtherReleased extends ethereum.Event {
  get params(): EtherReleased__Params {
    return new EtherReleased__Params(this);
  }
}

export class EtherReleased__Params {
  _event: EtherReleased;

  constructor(event: EtherReleased) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class VestingWallet extends ethereum.SmartContract {
  static bind(address: Address): VestingWallet {
    return new VestingWallet("VestingWallet", address);
  }

  beneficiary(): Address {
    let result = super.call("beneficiary", "beneficiary():(address)", []);

    return result[0].toAddress();
  }

  try_beneficiary(): ethereum.CallResult<Address> {
    let result = super.tryCall("beneficiary", "beneficiary():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  duration(): BigInt {
    let result = super.call("duration", "duration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_duration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("duration", "duration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  released(): BigInt {
    let result = super.call("released", "released():(uint256)", []);

    return result[0].toBigInt();
  }

  try_released(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("released", "released():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  released1(token: Address): BigInt {
    let result = super.call("released", "released(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_released1(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("released", "released(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  start(): BigInt {
    let result = super.call("start", "start():(uint256)", []);

    return result[0].toBigInt();
  }

  try_start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("start", "start():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestedAmount(timestamp: BigInt): BigInt {
    let result = super.call("vestedAmount", "vestedAmount(uint64):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_vestedAmount(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestedAmount",
      "vestedAmount(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestedAmount1(token: Address, timestamp: BigInt): BigInt {
    let result = super.call(
      "vestedAmount",
      "vestedAmount(address,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_vestedAmount1(
    token: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestedAmount",
      "vestedAmount(address,uint64):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get beneficiaryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get startTimestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get durationSeconds(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ReleaseCall extends ethereum.Call {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }
}

export class Release1Call extends ethereum.Call {
  get inputs(): Release1Call__Inputs {
    return new Release1Call__Inputs(this);
  }

  get outputs(): Release1Call__Outputs {
    return new Release1Call__Outputs(this);
  }
}

export class Release1Call__Inputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }
}

export class Release1Call__Outputs {
  _call: Release1Call;

  constructor(call: Release1Call) {
    this._call = call;
  }
}
